// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.23.3
// source: agent_manager.proto

package agent_manager

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AureliusAgentManagerClient is the client API for AureliusAgentManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AureliusAgentManagerClient interface {
	// rpc AgentChat(stream ChatRequest) returns (stream AgentChatResponse) {}
	RegisterAgent(ctx context.Context, in *RegisterAgentRequest, opts ...grpc.CallOption) (*RegisterAgentResponse, error)
	RegisterJob(ctx context.Context, in *RegisterJobRequest, opts ...grpc.CallOption) (*RegisterJobResponse, error)
}

type aureliusAgentManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewAureliusAgentManagerClient(cc grpc.ClientConnInterface) AureliusAgentManagerClient {
	return &aureliusAgentManagerClient{cc}
}

func (c *aureliusAgentManagerClient) RegisterAgent(ctx context.Context, in *RegisterAgentRequest, opts ...grpc.CallOption) (*RegisterAgentResponse, error) {
	out := new(RegisterAgentResponse)
	err := c.cc.Invoke(ctx, "/AureliusAgentManager/RegisterAgent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aureliusAgentManagerClient) RegisterJob(ctx context.Context, in *RegisterJobRequest, opts ...grpc.CallOption) (*RegisterJobResponse, error) {
	out := new(RegisterJobResponse)
	err := c.cc.Invoke(ctx, "/AureliusAgentManager/RegisterJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AureliusAgentManagerServer is the server API for AureliusAgentManager service.
// All implementations must embed UnimplementedAureliusAgentManagerServer
// for forward compatibility
type AureliusAgentManagerServer interface {
	// rpc AgentChat(stream ChatRequest) returns (stream AgentChatResponse) {}
	RegisterAgent(context.Context, *RegisterAgentRequest) (*RegisterAgentResponse, error)
	RegisterJob(context.Context, *RegisterJobRequest) (*RegisterJobResponse, error)
	mustEmbedUnimplementedAureliusAgentManagerServer()
}

// UnimplementedAureliusAgentManagerServer must be embedded to have forward compatible implementations.
type UnimplementedAureliusAgentManagerServer struct {
}

func (UnimplementedAureliusAgentManagerServer) RegisterAgent(context.Context, *RegisterAgentRequest) (*RegisterAgentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterAgent not implemented")
}
func (UnimplementedAureliusAgentManagerServer) RegisterJob(context.Context, *RegisterJobRequest) (*RegisterJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterJob not implemented")
}
func (UnimplementedAureliusAgentManagerServer) mustEmbedUnimplementedAureliusAgentManagerServer() {}

// UnsafeAureliusAgentManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AureliusAgentManagerServer will
// result in compilation errors.
type UnsafeAureliusAgentManagerServer interface {
	mustEmbedUnimplementedAureliusAgentManagerServer()
}

func RegisterAureliusAgentManagerServer(s grpc.ServiceRegistrar, srv AureliusAgentManagerServer) {
	s.RegisterService(&AureliusAgentManager_ServiceDesc, srv)
}

func _AureliusAgentManager_RegisterAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterAgentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AureliusAgentManagerServer).RegisterAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AureliusAgentManager/RegisterAgent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AureliusAgentManagerServer).RegisterAgent(ctx, req.(*RegisterAgentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AureliusAgentManager_RegisterJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AureliusAgentManagerServer).RegisterJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AureliusAgentManager/RegisterJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AureliusAgentManagerServer).RegisterJob(ctx, req.(*RegisterJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AureliusAgentManager_ServiceDesc is the grpc.ServiceDesc for AureliusAgentManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AureliusAgentManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "AureliusAgentManager",
	HandlerType: (*AureliusAgentManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterAgent",
			Handler:    _AureliusAgentManager_RegisterAgent_Handler,
		},
		{
			MethodName: "RegisterJob",
			Handler:    _AureliusAgentManager_RegisterJob_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "agent_manager.proto",
}
